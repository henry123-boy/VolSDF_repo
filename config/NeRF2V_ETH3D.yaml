_parent_: config/base.yaml

arch:                                                       # architectural optionss
    layers_occupancy: [null,256,256,256,256,256,256,256,256] # hidden layers for occupancy filed with uncertainty MLP
    layers_appearance: [null,256,256,256,3]                 # hidden layers for appearance MLP
    layers_uncertainty: [null,256,256,256,1]           # hidden layers for uncertainty MLP
    output_feat_dim: 64                                     # the dims of output feature map, output_feat_dim(mean)+output_feat_dim(std)
    skip: [4]                                               # skip connections
    posenc:                                                 # positional encoding:
        L_3D: 10                                            # number of bases (3D point)
        L_view: 4                                           # number of bases (viewpoint)
    density_activ: softplus                                 # activation function for output volume density
    tf_init: true                                           # initialize network weights in TensorFlow style
    learning_unc: false
    img_encoder:
        backbone: "resnet34"
        pretrained: true
        num_layers: 4
        index_interp: "bilinear"
        index_padding: "border"
        upsample_interp: "bilinear"
        feature_scale: 1.0
        use_first_pool: true

NeRF2V:                                                       # NeRF2V options
    view_dep: true                                          # condition MLP on viewpoint
    depth:                                                  # depth-related options
        param: metric                                      # depth parametrization (for sampling along the ray)
        range: [1,0]                                        # near/far bounds for depth sampling
        min_d: 0.1
        max_d: 60
    rescale: 1.0
    sample_intvs: 64                                       # number of samples
    sample_intvs_out: 32                                   # number of samples outside the surface
    sample_stratified: true                                 # stratified sampling
    fine_sampling: false                                    # hierarchical sampling with another NeRF
    sample_intvs_fine:                                      # number of samples for the fine NeRF
#    rand_triangles: 1                                       # number of random rays for each step
    rand_rays: 1024                                          # number of random rays for each step
#    density_noise_reg:                                      # Gaussian noise on density output as regularization
#    setbg_opaque:                                           # fill transparent rendering with known background color (Blender only)

data:                                                       # data options
    dataset: ETH3D                                           # dataset name
    scene: terrace                                             # scene name
    image_size: [516,740]                                   # input image sizes [height,width]
    #image_size: [344,492]
    #image_size: [100,200]                                   # input image sizes [height,width]
    num_workers: 4                                          # number of parallel workers for data loading
    preload: true                                           # preload the entire dataset into the memory
    val_ratio: 0.1                                          # ratio of sequence split for validation

camera:                                                     # camera options
    model: perspective                                      # type of camera model
    ndc: false                                              # reparametrize as normalized device coordinates (NDC)
    noise: false
    zero_init: false

loss_weight:                                                # loss weights (in log scale)
    front_render: 0                                               # RGB rendering loss
    back_render: 0
    unc_loss: -4
    pts3D_occup: -2
    reg_occup: -2
    reg_surf_occup: -2
    diff_norm_reg: -2


optim:                                                      # optimization options
    optimizer_dict: ['optim','optim_pose','optim_point3D','optim_depth','optim_unc']
    paras_dict: ['NeRF2V','se3_refine','pts3D','depth','unc']
    lr_dict: ['lr','lr_pose','lr_pts3D','lr_depth','lr_unc']
    sched_dict: ['sched','sched_pose','sched_pts3D','sched_depth','sched_unc']
    lr: 5.e-4                                               # learning rate (main)
    lr_end: 1.e-6                                           # terminal learning rate (only used with sched.type=ExponentialLR)
    lr_pose: 3.e-3                                          # learning rate of pose
    lr_pose_end: 1.e-5                                      # terminal learning rate for pose
    lr_pts3D: 3.e-3                                         # learning rate of pts3D
    lr_pts3D_end: 1.e-5                                     # terminal learning rate for pts3D
    lr_depth: 1.                                         # learning rate for depth
    lr_depth_end: 1.e-2                                     # terminal learning rate for depth
    lr_unc: 1.                                           # learning rate for uncertainty
    lr_unc_end: 1.e-2                                       # terminal learning rate for uncertainty
    sched:                                                  # learning rate scheduling options
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma:                                               # decay rate (can be empty if lr_end were specified)
    sched_pose:
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma:                                               # decay rate (can be empty if lr_end were specified)
    sched_pts3D:
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma:                                              # decay rate (can be empty if lr_end were specified)
    sched_depth:
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma:                                              # decay rate (can be empty if lr_end were specified)
    sched_unc:
        type: ExponentialLR                                 # scheduler (see PyTorch doc)
        gamma:                                              # decay rate (can be empty if lr_end were specified)

batch_size:                                                 # batch size (not used for NeRF/BARF)
max_epoch:                                                  # train to maximum number of epochs (not used for NeRF/BARF)
max_pts3D: 10000
max_iter: 200000                                            # train to maximum number of iterations
vis_point_cloud: true
freq:                                                       # periodic actions during training
    scalar: 10                                             # log losses and scalar states (every N iterations)
    vis: 10                                               # visualize results (every N iterations)
    val: 2000                                               # validate on val set (every N iterations)
    ckpt: 5000                                              # save checkpoint (every N iterations)